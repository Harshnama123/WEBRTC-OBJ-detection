<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Object Detection Demo - Laptop View</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #1a1a1a;
            color: white;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        
        .container {
            max-width: 1200px;
            width: 100%;
        }
        
        .header {
            text-align: center;
            margin-bottom: 30px;
        }
        
        .qr-section {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            border: 2px dashed #4CAF50;
            border-radius: 10px;
        }
        
        #qrcode {
            margin: 20px auto;
            background: white;
            padding: 20px;
            border-radius: 10px;
        }
        
        .phone-url {
            font-size: 18px;
            color: #4CAF50;
            margin: 10px 0;
        }
        
        .video-container {
            position: relative;
            display: none; /* Initially hidden */
            justify-content: center;
            margin: 20px 0;
            width: 100%;
            max-width: 800px;
            margin: 0 auto;
        }
        
        #remoteVideo {
            width: 100%;
            height: auto;
            border: 2px solid #4CAF50;
            border-radius: 10px;
            background: #000;
            display: block; /* Always visible when container is shown */
        }
        
        #detectionCanvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none;
        }
        
        .detection-stats {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            padding: 10px;
            border-radius: 5px;
            color: white;
            font-family: monospace;
        }
        
        .status {
            text-align: center;
            padding: 10px;
            margin: 10px 0;
            border-radius: 5px;
            background: #333;
        }
        
        .connected { background: #4CAF50; }
        .disconnected { background: #f44336; }
        .waiting { background: #ff9800; }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .detection-stats {
            position: absolute;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            padding: 15px;
            border-radius: 8px;
            color: white;
            font-family: monospace;
            font-size: 14px;
            transition: all 0.3s ease;
            border: 1px solid rgba(255,255,255,0.1);
            text-shadow: 1px 1px 1px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ðŸŽ¯ Real-time Object Detection</h1>
            <p>Scan QR code with your phone to start streaming</p>
        </div>
        
        <div class="qr-section">
            <h3>ðŸ“± Connect Your Phone</h3>
            <div style="background: #333; padding: 20px; border-radius: 10px; margin: 20px 0;">
                <p style="font-size: 18px; margin-bottom: 10px;">On your phone, visit:</p>
                <div class="phone-url" style="font-size: 24px; font-weight: bold;">
                    <span id="phoneUrl">Loading...</span>
                </div>
                <div style="margin-top: 15px;">
                    <button onclick="copyUrl()" style="padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 5px; cursor: pointer;">
                        ðŸ“‹ Copy URL
                    </button>
                </div>
            </div>
            <p><small>Make sure your phone and laptop are on the same WiFi network</small></p>
        </div>
        
        <div class="status waiting" id="status">
            Waiting for phone connection...
        </div>
        
        <div class="video-container">
            <video id="remoteVideo" autoplay playsinline>
                Your browser doesn't support video playback.
            </video>
            <canvas id="detectionCanvas"></canvas>
            <div class="detection-stats" id="stats"></div>
        </div>
    </div>

    <!-- Socket.io for real-time communication -->
    <script src="/socket.io/socket.io.js"></script>
    
    <script>
        // Helper function to generate consistent colors for labels
        function getColorForLabel(label) {
            const colors = {
                person: '#FF0000',
                car: '#00FF00',
                dog: '#0000FF',
                cat: '#FF00FF',
                bottle: '#FFFF00',
                chair: '#00FFFF',
                // Add more colors for other classes
            };
            
            // If we don't have a predefined color, generate one
            if (!colors[label]) {
                let hash = 0;
                for (let i = 0; i < label.length; i++) {
                    hash = label.charCodeAt(i) + ((hash << 5) - hash);
                }
                const color = '#' + ('00000' + (hash & 0xFFFFFF).toString(16)).slice(-6);
                colors[label] = color;
            }
            
            return colors[label];
        }

        // Helper function to convert hex color to rgba
        function hexToRgba(hex, alpha) {
            const r = parseInt(hex.slice(1, 3), 16);
            const g = parseInt(hex.slice(3, 5), 16);
            const b = parseInt(hex.slice(5, 7), 16);
            return `rgba(${r}, ${g}, ${b}, ${alpha})`;
        }

        const socket = io();
        const statusEl = document.getElementById('status');
        const remoteVideo = document.getElementById('remoteVideo');
        const phoneUrlEl = document.getElementById('phoneUrl');
        
        // Generate phone URL (we'll get local IP automatically)
        function initUrl() {
            const phoneUrl = `${window.location.origin}/phone`;
            phoneUrlEl.textContent = phoneUrl;
        }
        
        // Copy URL to clipboard
        function copyUrl() {
            const url = phoneUrlEl.textContent;
            navigator.clipboard.writeText(url).then(() => {
                alert('URL copied! Paste it in your phone browser.');
            });
        }
        
        // Initialize URL when page loads
        initUrl();
        
        // Variables for WebRTC state management
        let peerConnection = null;
        let isConnecting = false;

        function cleanupPeerConnection() {
            if (peerConnection) {
                // Remove all event listeners
                peerConnection.ontrack = null;
                peerConnection.onicecandidate = null;
                peerConnection.oniceconnectionstatechange = null;
                
                // Stop all transceivers
                if (peerConnection.getTransceivers) {
                    peerConnection.getTransceivers().forEach(transceiver => {
                        if (transceiver.stop) {
                            transceiver.stop();
                        }
                    });
                }

                // Close the connection
                peerConnection.close();
                peerConnection = null;

                // Clear video
                if (remoteVideo.srcObject) {
                    remoteVideo.srcObject.getTracks().forEach(track => track.stop());
                    remoteVideo.srcObject = null;
                }
            }
            isConnecting = false;
        }

        function createPeerConnection() {
            // Prevent multiple simultaneous connection attempts
            if (isConnecting) {
                console.log("Connection already in progress");
                return null;
            }

            // Clean up any existing connection first
            cleanupPeerConnection();

            try {
                isConnecting = true;
                peerConnection = new RTCPeerConnection({
                    iceServers: [
                        { urls: 'stun:stun.l.google.com:19302' }
                    ]
                });

                peerConnection.ontrack = (event) => {
                    console.log("Received track", event);
                    if (event.streams && event.streams[0]) {
                        console.log("Setting remote stream");
                        try {
                            remoteVideo.srcObject = event.streams[0];
                            remoteVideo.style.display = 'block';
                            document.querySelector('.video-container').style.display = 'flex';
                            remoteVideo.play().catch(e => console.error("Error playing video:", e));
                        } catch (e) {
                            console.error("Error setting up video:", e);
                            // Try recovering
                            setTimeout(() => {
                                try {
                                    remoteVideo.srcObject = event.streams[0];
                                    remoteVideo.play();
                                } catch (retryError) {
                                    console.error("Retry failed:", retryError);
                                }
                            }, 1000);
                        }
                    }
                };                peerConnection.onicecandidate = (event) => {
                    if (event.candidate) {
                        console.log("Sending ICE candidate from laptop");
                        socket.emit('ice-candidate', event.candidate);
                    }
                };

                peerConnection.oniceconnectionstatechange = () => {
                    console.log("ICE Connection State:", peerConnection.iceConnectionState);
                    if (peerConnection.iceConnectionState === 'disconnected' || 
                        peerConnection.iceConnectionState === 'failed' ||
                        peerConnection.iceConnectionState === 'closed') {
                        console.log("Connection lost, cleaning up...");
                        cleanupPeerConnection();
                    }
                };

                return peerConnection;
            } catch (error) {
                console.error("Error creating peer connection:", error);
                isConnecting = false;
                return null;
            }
        }

        socket.on('phone-connected', () => {
            try {
                // Update status
                statusEl.textContent = 'Phone connected! ðŸŽ‰';
                statusEl.className = 'status connected';
                
                // Hide connection UI
                document.querySelector('.qr-section').style.display = 'none';
                document.querySelector('.header p').style.display = 'none';
                
                // Show video container
                document.querySelector('.video-container').style.display = 'flex';

                // Clean up any existing connection and create a new one
                cleanupPeerConnection();
                const pc = createPeerConnection();
                
                if (!pc) {
                    throw new Error("Failed to create peer connection");
                }

                // Tell phone we're ready
                socket.emit('laptop-ready');
            } catch (e) {
                console.error("Error in phone-connected handler:", e);
                statusEl.textContent = 'Connection failed. Please refresh and try again.';
                statusEl.className = 'status disconnected';
            }
        });
        
            // Handle incoming offer from phone
            socket.on('offer', async (offer) => {
                try {
                    console.log("Received offer");
                    
                    // Always create a fresh connection when receiving an offer
                    cleanupPeerConnection();
                    const pc = createPeerConnection();
                    
                    if (!pc) {
                        throw new Error("Failed to create peer connection for offer");
                    }
                    
                    // Set remote description first
                    await pc.setRemoteDescription(new RTCSessionDescription(offer));
                    console.log("Set remote description");
                    
                    // Create and set local answer
                    const answer = await pc.createAnswer();
                    await pc.setLocalDescription(answer);
                    console.log("Created and set local description");
                    
                    // Send answer
                    socket.emit('answer', answer);
                    console.log("Sent answer");
                } catch (e) {
                    console.error("Error handling offer:", e);
                    cleanupPeerConnection();
                    // Notify the UI
                    statusEl.textContent = 'Connection failed. Please try again.';
                    statusEl.className = 'status disconnected';
                }
            });        // Handle incoming ICE candidates from phone
        socket.on('ice-candidate', async (candidate) => {
            try {
                console.log("Received ICE candidate");
                if (!peerConnection) {
                    console.error("No peer connection available");
                    return;
                }
                if (peerConnection.remoteDescription) {
                    await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));
                    console.log("Added ICE candidate");
                } else {
                    console.log("Waiting for remote description before adding ICE candidate");
                }
            } catch (e) {
                console.error("Error adding ICE candidate:", e);
            }
        });
        
        socket.on('phone-disconnected', () => {
            statusEl.textContent = 'Phone disconnected';
            statusEl.className = 'status disconnected';
            remoteVideo.style.display = 'none';
            cleanupPeerConnection();
        });
        
        // Handle video stream and detections
        const canvas = document.getElementById('detectionCanvas');
        const ctx = canvas.getContext('2d');
        const statsEl = document.getElementById('stats');
        
        // When we receive detection results
        socket.on('detection-results', (results) => {
            // Show the video if it's hidden
            if (remoteVideo.style.display === 'none') {
                remoteVideo.style.display = 'block';
            }
            
            // Update canvas size to match video
            canvas.width = remoteVideo.videoWidth;
            canvas.height = remoteVideo.videoHeight;
            
            // Clear previous drawings
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            
            // Draw detections
            results.detections.forEach(detection => {
                // Calculate actual coordinates
                const x = detection.xmin * canvas.width;
                const y = detection.ymin * canvas.height;
                const width = (detection.xmax - detection.xmin) * canvas.width;
                const height = (detection.ymax - detection.ymin) * canvas.height;
                
                // Generate a color based on the label (consistent for each class)
                const color = getColorForLabel(detection.label);
                
                // Draw bounding box with animation
                ctx.strokeStyle = color;
                ctx.lineWidth = 3;
                ctx.strokeRect(x, y, width, height);
                
                // Draw semi-transparent background for label
                const label = `${detection.label} (${Math.round(detection.score * 100)}%)`;
                ctx.font = '16px Arial';
                const textWidth = ctx.measureText(label).width;
                
                ctx.fillStyle = hexToRgba(color, 0.7);
                ctx.fillRect(x, y - 25, textWidth + 10, 25);
                
                // Draw label text
                ctx.fillStyle = 'white';
                ctx.fillText(label, x + 5, y - 7);
            });
            
            // Add some visual effects for new detections
            if (results.detections.length > 0) {
                // Pulse effect on stats
                statsEl.style.animation = 'none';
                statsEl.offsetHeight; // Trigger reflow
                statsEl.style.animation = 'pulse 0.5s';
            }
            
            // Update stats
            statsEl.textContent = `
                Detections: ${results.detections.length}
                Inference time: ${results.inference_time}ms
            `;
        });

        console.log('Laptop view initialized');
    </script>
</body>
</html> -->
